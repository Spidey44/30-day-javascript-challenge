<!-- practice: 

#1 Update the original wont update the other one after been used as ref.

let age = 100; age2 = age;
console.log(age, age2) - 100, 100

age = 200;
console.log(age, age2) - 200 100

let name = 'Wes'; name2 = name;
console.log(name, name2) - Wes, Wes

name = 'wesley';
console.log(name, name2) - Wesley, Wesley

#2 Copy vs Reference for Arrays 

PRB

const players = ['Wes', 'Sarah', 'Ryan', 'Poppy'];
const team = players;
console.log(players, team) -  2 same array ['Wes', 'Sarah', 'Ryan', 'Poppy'];

team[3] = 'Lux';
console.log(players, team) - 2 same array ['Wes', 'Sarah', 'Ryan', 'Poppy', 'Lux']

SOL  .slice()
return a new array modified while the original is untouched.
const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
console.log(animals.slice(2)); // Expected output: Array ["camel", "duck", "elephant"]
console.log(animals.slice(2, 4)); // Expected output: Array ["camel", "duck"]

const team4 = [...players];
team4[3] = 'heeee hawww';


SOL object The Object.assign()
copies all enumerable own properties from one or more source objects to a target object. 
It returns the modified target object

PB Object
const person = { name: 'Wes Bos', age: 80}; 
const captain = person; // captain.number = 99;

SOL object The Object.assign()
copies all enumerable own properties from one or more source objects to a target object. 
It returns the modified target object

LIMITATION: goes one level deep only.


#1 const cap2 = Object.assign({}, person, { number: 99, age: 12 });
console.log(cap2);

#2 const cap3 = {...person};
-->
