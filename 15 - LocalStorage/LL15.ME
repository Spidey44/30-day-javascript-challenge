<!-- practice: 
FORM

#1 
Grab the form element
-> Click: listen to the submit EVENT to trigger function add item()
-> e.preventDefault()
-> Get  the input with the property value
 function addItem(e) {
    const text = (this.querySelector('[name=item]')).value;
    //"this" narrow down could be document.querySelector('').value;
    const item = {
      text,
      done: false
    }};
  -> push the item value to array

#1 Persisting state with local storage
Refresh from keep the data 

-> function populateList(plates = [], platesList) {
    platesList.innerHTML = plates.map((plate, i) => {
      return `
        <li>
          <input type="checkbox" data-index=${i} id="item${i}" ${plate.done ? 'checked' : ''} />
          <label for="item${i}">${plate.text}</label>
        </li>
      `;
    }).join('');
  }

-> localstorage.setItem()
when passed a key name and value, will add that key to the given Storage object, 
or update that key's value if it already exists
  function populateStorage() {
  localStorage.setItem("bgcolor", "red");
  localStorage.setItem("font", "Helvetica");
  localStorage.setItem("image", "myCat.png");
}

Storage only supports storing and retrieving strings. 
If you want to save other data types, you have to convert them to strings. For plain objects and arrays, you can use JSON.stringify().

  #1 on page Load, add object and update everytime
    localStorage.setItem('items', JSON.stringify(items));
    #last on page  load
    populateList(items, itemsList);


  #2 on search, Get the object or fall back on empty array.
    const items = JSON.parse(localStorage.getItem('items')) || [];



#2 Event delegation fix element does not exist 
-> cannot be detected by event listener
-> Add a object and directly click it =
-> Negligent child ( forget), responsible parent ( remember tell how handle event)

function toggleDone(e) {
    if (!e.target.matches('input')) return; // skip this unless it's an input
  }
  itemsList.addEventListener('click', toggleDone);
-->
