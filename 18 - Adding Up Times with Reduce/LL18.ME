<!-- 
        .reduce()
        method of Array instances executes a user-supplied "reducer" callback function 
        on each element of the array, in order, passing in the return value 
        from the calculation on the preceding element. 
        The final result of running the reducer across all elements of the array is a single value.

        const array1 = [1, 2, 3, 4]; // 0 + 1 + 2 + 3 + 4
        const initialValue = 0;
        const sumWithInitial = array1.reduce(
        (accumulator, currentValue) => accumulator + currentValue,
        initialValue,);
        console.log(sumWithInitial); // Expected output: 10

        MODAL
        % give re reminder after all items divided equally
        11 % 2 = 1 vs 11 / 2 = 2.2

        map()
        takes and creates a new modified array populated on all elements
        
        const array1 = [1, 4, 9, 16];
        const map1 = array1.map((x) => x * 2); // Pass a function to map
        console.log(map1); // Expected output: Array [2, 8, 18, 32]

        parseFloat() 
        function parses a string argument and returns a floating point number.
        function circumference(r) {return parseFloat(r) * 2.0 * Math.PI;}
        console.log(circumference(4.567)); // Expected output: 28.695307297889173
        console.log(circumference('4.567abcdefgh')); // Expected output: 28.695307297889173
        console.log(circumference('abcdefgh')); // Expected output: NaN


        #1 Pull DATa out of the DOM
                COnvert node list into an array to overcome the map node limitation
                #1.1 const timeNodes = Array.from(document.querySelectorAll('[data-time]'));
                #1.1 const timeNodes = [...document.querySelectorAll('[data-time]')];

        #2 Convert data into number: Minutes/secs
                const seconds = timeNodes
                .map(node => node.dataset.time)
                .map(timeCode => {
                const [mins, secs] = timeCode.split(':').map(parseFloat);
                return (mins * 60) + secs;
                                 })
                .reduce((total, vidSeconds) => total + vidSeconds);

        #3 Ad them all up
        #4 Console log 


-->
